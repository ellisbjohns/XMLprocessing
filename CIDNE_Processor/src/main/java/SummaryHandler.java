import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.*;

import java.io.FileWriter;
import java.util.Random;

/**
 * Created by ejohns on 10/3/15.
 * This adapter of the Sax DefaultHandler takes in xml files generated by the altova mapforce application (either java code or gui output) and then modifies
 * the xml for orbis's ingest.  Orbis also needed the empty feilds (like the KIA fields) populated so the code below throws random numbers into the these
 * fields.
 *
 * Of note, if you want WTI fields/data added to the XML then be sure to uncomment line 199 (WTI_text = LexiconSearch.match(characterData)
 */
public class SummaryHandler extends DefaultHandler {
    String writeLocation = "/home/ejohns/"; //default location if none is given.
    int writeIndex=0;
    String displayText[] = new String[1500];
    int numberLines = 0;
    String indentation = "";
    int MAX_LINES = 1000;
    int MAX_FILES = 500000;
    String END_TAG = "OperationsSIGACT";
    boolean addWTI_Field= false; //a flag used to determine if WTI text will be included in the file output
    boolean WTI_FieldLexiconMatch =false;  //used to determine if a Lexion match was found in the Summary Text
    boolean isSummaryField = false;
    boolean writeElement = false; //flag used to dictate if xml elements should be written or not.  Each
    //encounter w/ a start element will reset the flag to true;
    boolean isLatitudeField=false;
    boolean isLongitudeField=false;
    Random random = new Random();
    char[] prevChars;

    boolean latFilter = false;
    boolean lonFilter = false;

    //constants for afganistan locale
    double MAX_LAT= 38.535;
    double MIN_LAT= 29.376;
    double MAX_LON= 74.9457;
    double MIN_LON= 60.872;

    WTI_Text WTI_text = null;

    public SummaryHandler(String uri) {
        writeLocation = uri;


    }

    public void startDocument() throws SAXException {

    }

    public void startElement(String uri, String localName,
                             String qualifiedName, Attributes attributes) throws SAXException {
        writeElement=true;
        displayText[numberLines] = indentation;

        indentation += "    ";

        displayText[numberLines] += '<';
        displayText[numberLines] += qualifiedName;
        if (attributes != null) {
            int numberAttributes = attributes.getLength();
            for (int loopIndex = 0; loopIndex < numberAttributes;
                 loopIndex++) {
                displayText[numberLines] += ' ';
                displayText[numberLines] += attributes.getQName(loopIndex);
                displayText[numberLines] += "=\"";
                displayText[numberLines] += attributes.getValue(loopIndex);
                displayText[numberLines] += '"';
            }
        }
        displayText[numberLines] += '>';
        numberLines++;

        //If summary field then look through text for words of interest using LexiconSearch.  If present then add new WTI elements



        isLatitudeField = qualifiedName.equals("Latitude");
        isLongitudeField = qualifiedName.equals("Longitude");
        isSummaryField = qualifiedName.equals("Summary");

        //if HostNationKIA field then chage character data to a random integer between 0 and 4
        if (qualifiedName.endsWith("HostNationKIA"))
        {
            random.nextInt(4);

            characters(new Integer(random.nextInt(4)).toString().toCharArray(), 0, 1);
            endElement("", "HostNationKIA", "HostNationKIA");
            writeElement=false;

        }

        //if HostNationWIA field then chage character data to a random integer between 0 and 4
        //and add the EnemyKIA field and the FriendlyKIA field
        if (qualifiedName.endsWith("HostNationWIA"))
        {
            characters(new Integer(random.nextInt(4)).toString().toCharArray(), 0, 1);
            endElement("", "HostNationWIA", "HostNationWIA");
            writeElement=false;


        }





    }

    public void endElement(String uri, String localName,
                           String qualifiedName) throws SAXException {

        if (writeElement) {
            indentation = (indentation.length() > 4) ? indentation.substring(0, indentation.length() - 4) : "";
            displayText[numberLines] = indentation;
            displayText[numberLines] += "</";
            displayText[numberLines] += qualifiedName;
            displayText[numberLines] += '>';
            numberLines++;
        }

        if (addWTI_Field && isSummaryField && WTI_FieldLexiconMatch) {

            startElement("", "WTI", "WTI", null);
            startElement("", "MainCharge", "MainCharge", null);
            characters(WTI_text.getMainCharge().toCharArray(), 0, WTI_text.getMainCharge().toCharArray().length);
            endElement("", "MainCharge", "MainCharge");
            startElement("", "Trigger", "Trigger", null);
            characters(WTI_text.getTrigger().toCharArray(), 0, WTI_text.getTrigger().toCharArray().length);
            endElement("", "Trigger", "Trigger");
            startElement("", "Switch", "Switch", null);
            characters(WTI_text.getSwitch().toCharArray(), 0, WTI_text.getSwitch().toCharArray().length);
            endElement("", "Switch", "Switch");
            endElement("", "WTI", "WTI");

        }

        if (qualifiedName.equals("DateOccurred"))
        {
            startElement("", "CivilianKIA", "CivilianKIA", null);
            characters(new Integer(random.nextInt(4)).toString().toCharArray(), 0, 1);
            endElement("", "CivilianKIA", "CivilianKIA");
            startElement("", "CivilianWIA", "CivilianWIA", null);
            characters(new Integer(random.nextInt(4)).toString().toCharArray(), 0, 1);
            endElement("", "CivilianWIA", "CivilianWIA");

            startElement("", "EnemyKIA", "EnemyKIA", null);
            characters(new Integer(random.nextInt(4)).toString().toCharArray(), 0, 1);
            endElement("", "EnemyKIA", "EnemyKIA");
            startElement("", "EnemyWIA", "EnemyWIA", null);
            characters(new Integer(random.nextInt(4)).toString().toCharArray(), 0, 1);
            endElement("", "EnemyWIA", "EnemyWIA");


            startElement("", "FriendlyKIA", "FriendlyKIA", null);
            characters(new Integer(random.nextInt(4)).toString().toCharArray(), 0, 1);
            endElement("", "FriendlyKIA", "FriendlyKIA");
            startElement("", "FriendlyWIA", "FriendlyWIA", null);
            characters(new Integer(random.nextInt(4)).toString().toCharArray(), 0, 1);
            endElement("", "FriendlyWIA", "FriendlyWIA");


        }

        if (qualifiedName.equals("Title"))
        {
                startElement("", "Type", "Type", null);
                characters(prevChars, 0, prevChars.length);
                endElement("", "Type", "Type");
                startElement("", "PrimaryEventCategory", "PrimaryEventCategory", null);
                characters(prevChars, 0, prevChars.length);
                endElement("", "PrimaryEventCategory", "PrimaryEventCategory");

        }

        //check to see if MaxLines has been exceeded
   // if(numberLines>MAX_LINES && qualifiedName.equals(END_TAG))
        if(qualifiedName.equals(END_TAG) && numberLines > 1)

    {
        endElement("", "OperationsSIGACTReports", "OperationsSIGACTReports");
        writeXML_file(writeLocation);
        numberLines = 0;
        startElement("", "OperationsSIGACTReports", "OperationsSIGACTReports", null);  //for next record
        // displayText[] = new displayTex[]

    }

}




    public void characters(char characters[],
                           int start, int length) {
        String characterData = (new String(characters, start, length)).trim();
        prevChars=characterData.toCharArray();
        if(characterData.indexOf("\n") < 0 && characterData.length() > 0) {

            if (writeElement) {
                displayText[numberLines] = indentation;
                if (isSummaryField)
                {
                    displayText[numberLines] += "<![CDATA["+characterData + "]]>";
                }
                else
                {
                    displayText[numberLines] += characterData;
                }
                numberLines++;
            }
            if (isSummaryField)
            {
                WTI_text = LexiconSearch.match(characterData);
                WTI_FieldLexiconMatch = WTI_text !=null;



            }
            if (isLatitudeField)
            {
                latFilter= (LocaleFilter.matchLat(MIN_LAT,MAX_LAT,characterData));


            }

            if (isLongitudeField)
            {
                lonFilter= (LocaleFilter.matchLon(MIN_LON,MAX_LON,characterData));


            }

                    }
    }


    public void endDocument() throws SAXException {

        }




    public void writeXML_file(String fileName)
    {
        try {
//            if (addWTI_Field && latFilter && lonFilter) {
            if (latFilter && lonFilter) {
                FileWriter filewriter = new FileWriter(fileName + "icews1out" + writeIndex + ".xml");
                for (int loopIndex = 0; loopIndex < numberLines; loopIndex++) {
                    filewriter.write(displayText[loopIndex].toCharArray());
                    filewriter.write('\n');

                    System.out.println(displayText[loopIndex].toString());
                }
                filewriter.close();
                writeIndex++;
            }

            if (writeIndex > MAX_FILES)
            {

            System.exit(0);
            }

        }
        catch (Exception e) {
            e.printStackTrace(System.err);
        }


    }

    public String[] getDisplayText() {
        return displayText;
    }

    public int getWriteIndex()
    {
        return writeIndex;
    }





}
